// const _ = require('lodash')
const https = require('https')
const path = require('path')
const URL = require('url').URL
const tools = require('../util/tools')
const baseInterface = require('./iWebParser')
// https://www.xsnvshen.com/  // score:9   www.jpmnb.cc

const parseUrlKindAndId = (url, log) => {
  const reg = /https:\/\/\w+\.\w+\.\w+\/(\w+)\/(\d+)/ig
  const matchs = reg.exec(url)
  // log && log.trace(matchs)
  if (matchs) {
    const [, kind, id] = matchs
    return { kind, id }
  }
}

const parseTitle = async (content) => {
  const eles = await tools.getElements(content, '.swp-tit a')
  if (eles && eles.length > 0) {
    return await tools.getElementText(eles[0])
  }
}

class XsNvShen extends baseInterface {
  get curHost() {
    return 'www.xsnvshen.com'
  }

  get outputFolder() {
    return 'E:\\xsnvshen'
  }

  get encoding() {
    return ''
  }

  get parseImageSelector() {
    // return '#bigImg'
    // return '.workShow img'
    return '.swi-hd img'
  }

  get catalogSelector() {
    return '.star-mod-bd a:has(img)'
  }

  get requestOptions() {
    return {
      headers: {
        // Host: 'www.xsnvshen.com',
      },
      httpsAgent: new https.Agent({ rejectUnauthorized: false }),
    }
  }

  get entryPageConfig() { }

  async parsePicUrl(content) {
    const imgSelector = this.parseImageSelector
    const imgs = await tools.getElements(content, imgSelector)
    const title = await parseTitle(content)
    return await Promise.all(
      imgs.map(async (index, img) => {
        const { 'data-original': src } = await tools.getElementAttribute(img, ['data-original'])
        return { src: `https:${src}`, alt: title }
      }),
    )
  }

  async getPicUrlFromPicPage(url, timeout) {
    const { is404, images } = await super.getPicUrlFromPicPage(url, timeout)
    return {
      is404,
      images: images.map(({ src, alt, picUrl, folder, headers }) => {
        const dir = `${path.dirname(new URL(src).pathname)}${alt}`
        return {
          picUrl,
          folder: path.join(folder, dir),
          headers,
        }
      }),
    }
  }

  async getTotalPicPageUrl(url, timeout) {
    return { is404: false, pages: [url] }
  }

  async getCatalogPages(url, timeout) {
    const { is404, pages } = await super.getCatalogPages(url, timeout)
    return {
      is404,
      pages: pages.map(({ href, title }) => {
        const urlObject = new URL(href, url)
        const host = urlObject.host
        const { kind, id: pageId } = parseUrlKindAndId(urlObject.href)
        return { href: urlObject.href, title, host, kind, pageId }
        // ({ href: new URL(href, url).href, title })
      }),
    }
  }
}

module.exports = XsNvShen
